This place is for some notes and progress tracking for myself :-)
https://igl.ethz.ch/projects/libigl/matlab-to-eigen.html

Quaternion Operations (3 files)
[C][T]    up_plus.m
[C][T]    up_oplus.m
[C][T]    up_star.m

Lie Algebra Operations (4 files)
[C][T]    up_hat.m
[C][T]    up_vee.m
[C][T]    exphat.m
[C][P]    veelog.m   # values were off
[C][T]    exphat.m
[C][T]    get_end.m

Conversions (6 files)
[C][T]    arc2q.m
[C][T]    q2arc.m
[C][T]    arc2xi.m
[C][T]    xi2arc.m    
    xi2len.m
[C][T]    q2rot.m
[C][T]    rot2q.m

Numerical Methods (5 files)
    revise_grad.m
[C][P]    revise_dls.m  
[C][P]    revise_newton.m
    revise_plot.m
[C][T]    jacobian3cc.m
[C][T]    jaco_c12

Solver (7 files)
    micsolver.m
    micsolver__
[C][T]    rho.m
    soln2xi.m
[C][T]    get_err.m
[C][P]    solve_r1.m
[C][T]    solve_r2.m

Question for revise_newton
1. revise_newton: is Tt \ Td => Tt.inv() * Td excatly same?
        X = U\(L\b)
        ****
        X = b;
        L.template triangularView<Lower>().solveInPlace(X);
        U.template triangularView<Upper>().solveInPlace(X);
2. revise_newton :also logm and .log() works slighly different in c++ and MATLAB.
3. solve_r1: 
    tmp = r1 - [r0, ne] * (([n0.' + [0, 0, L1*d*(1/acos(r1(3)) - 1/sqrt(1-r1(3)^2))]; ne.'] * [r0, ne]) \ [n0.' * r1 - rho(r1(3), L1) * d; ne.' * r1]);



    
